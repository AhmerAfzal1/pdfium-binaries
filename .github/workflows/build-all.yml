name: Build all

on:
  workflow_dispatch:
    inputs:
      branch:
        description: PDFium branch
        required: false
        default: main
      version:
        description: PDFium version
        required: false
        default: ""
      enable_v8:
        description: Enable V8
        type: boolean
        required: false
        default: false
      is_debug:
        description: Is debug
        type: boolean
        required: false
        default: false
      repository:
        description: Upload to repo
        required: false
      push_nuget:
        description: Publish to nuget.org
        type: boolean
        required: false
        default: false

jobs:
  build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        include:
          - target_os: android
            target_cpu: arm

          - target_os: android
            target_cpu: arm64

          - target_os: android
            target_cpu: x64

          - target_os: android
            target_cpu: x86

          - target_os: ios
            target_cpu: arm64

          - target_os: ios
            target_cpu: x64

          - target_os: linux
            target_cpu: arm

          - target_os: linux
            target_cpu: arm64

          - target_os: linux
            target_cpu: x64

          - target_os: linux
            target_cpu: x86

          - target_os: linux
            target_libc: musl
            target_cpu: x64

          - target_os: linux
            target_libc: musl
            target_cpu: x86

          - target_os: mac
            target_cpu: arm64

          - target_os: mac
            target_cpu: x64

          - target_os: win
            target_cpu: arm64

          - target_os: win
            target_cpu: x64

          - target_os: win
            target_cpu: x86

          - target_os: wasm
            target_cpu: wasm

    runs-on: ${{ (matrix.target_os == 'ios' || matrix.target_os == 'mac') && 'macos-latest' || matrix.target_os == 'win' && 'windows-2019' || 'ubuntu-20.04' }}
    steps:
      - name: Initialize
        id: init
        shell: bash
        run: |
          ARTIFACT="pdfium-${{matrix.target_os}}"
          [ "${{matrix.target_libc}}" != "" ] && ARTIFACT="$ARTIFACT-${{matrix.target_libc}}"
          [ "${{matrix.target_os}}" != "${{matrix.target_cpu}}" ] && ARTIFACT="$ARTIFACT-${{matrix.target_cpu}}"
          [ "${{matrix.enable_v8}}" == "true" ] && ARTIFACT="$ARTIFACT-v8"
          echo "artifact=$ARTIFACT" >> $GITHUB_OUTPUT
      - name: Checkout this repo
        uses: actions/checkout@v2
      - name: Workaround for libpcre2 i386 # https://github.com/actions/virtual-environments/issues/4589#issuecomment-1100899313
        if: matrix.target_os == 'android'
        run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update -qq
          sudo apt-get install -yqq --allow-downgrades libpcre2-8-0/focal libpcre2-16-0/focal libpcre2-32-0/focal libpcre2-posix2/focal
      - name: Set environment variables
        run: |
          cat >>$GITHUB_ENV <<END
          PDFium_BRANCH=${{ github.event.inputs.branch }}
          PDFium_IS_DEBUG=${{ github.event.inputs.is_debug }}
          PDFium_TARGET_CPU=${{ matrix.target_cpu }}
          PDFium_TARGET_OS=${{ matrix.target_os }}
          PDFium_TARGET_LIBC=${{ matrix.target_libc }}
          PDFium_ENABLE_V8=${{ github.event.inputs.enable_v8 }}
          PDFium_VERSION=${{ github.event.inputs.version }}
          MUSL_URL=${{ secrets.MUSL_URL }}
          END
          steps/00-environment.sh
        shell: bash
      - name: Install (1/2)
        run: steps/01-install.sh
        shell: bash
      - name: Checkout PDFium
        run: steps/02-checkout.sh
        shell: bash
      - name: Apply patches
        run: steps/03-patch.sh
        shell: bash
      - name: Install (2/2)
        run: steps/04-install-extras.sh
        shell: bash
      - name: Configure
        run: steps/05-configure.sh
        shell: bash
      - name: Build
        run: steps/06-build.sh
        shell: bash
      - name: Stage
        run: steps/07-stage.sh
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.init.outputs.artifact }}
          path: staging/
      - name: Test
        run: steps/08-test.sh
        shell: bash

  mac_univ:
    name: Build macOS universal package
    runs-on: macos-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Create universal library
        run: |
          cp -r pdfium-mac-arm64 pdfium-mac-univ
          sed -i '' '/target_cpu/d' pdfium-mac-univ/args.gn
          rm pdfium-mac-univ/lib/libpdfium.dylib
          lipo -create \
            pdfium-mac-arm64/lib/libpdfium.dylib \
            pdfium-mac-x64/lib/libpdfium.dylib \
            -output pdfium-mac-univ/lib/libpdfium.dylib
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: pdfium-mac-univ
          path: pdfium-mac-univ

  nuget:
    name: Build NuGet packages
    runs-on: windows-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: nuget
      - name: Pack
        shell: bash
        run: |
          for NUSPEC in nuget/*.nuspec; do
            echo "::group::$NUSPEC"
            nuget pack "$NUSPEC" -properties "version=${{ github.event.inputs.version || '0.0.0.0' }};branch=${GITHUB_REF#refs/heads/};commit=${GITHUB_SHA}"
            echo "::endgroup::"
          done
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: NuGet packages
          path: '*.nupkg'
      - name: Push to nuget.org
        if: ${{ github.event.inputs.push_nuget }}
        run: nuget push -Source nuget.org -ApiKey ${{ secrets.NUGET_API_KEY }} *.nupkg

  publish:
    name: Publish Release
    if: ${{ github.event.inputs.repository }}
    runs-on: ubuntu-latest
    needs: [build, mac_univ]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Create tarballs
        run: |
          for DIR in pdfium-*; do
            echo "::group::$DIR"
            (cd $DIR; tar czf ../$DIR$SUFFIX.tgz *)
            echo "::endgroup::"
          done
        env:
          SUFFIX: ${{ github.event.inputs.enable_v8 == 'true' && '-v8' || '' }}${{ github.event.inputs.is_debug == 'true' && '-debug' || '' }}
      - name: Write release body
        run: echo 'This version was built with branch `${{ github.event.inputs.branch }}` of PDFium' > RELEASE.md
      - name: Get changes
        continue-on-error: true
        run: |
          CURRENT_REV=${{ github.event.inputs.branch }}
          PREVIOUS_REV=$(curl --silent "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.inputs.repository }}/releases/latest" | jq -r ".tag_name")
          git clone -b "${{ github.event.inputs.branch }}" https://pdfium.googlesource.com/pdfium.git
          cat <<END >> RELEASE.md
          ### Changes
          Commits between \`$PREVIOUS_REV\` and \`$CURRENT_REV\`:
          END
          git -C "pdfium" log origin/${PREVIOUS_REV}.. --pretty=format:'* [%s](https://pdfium.googlesource.com/pdfium/+/%H)' >> RELEASE.md
      - name: Publish Release
        uses: ncipollo/release-action@v1
        with:
          repo: ${{ github.event.inputs.repository }}
          allowUpdates: true
          bodyFile: RELEASE.md
          token: ${{ secrets.GITHUB_TOKEN }}
          name: PDFium ${{ github.event.inputs.version }}
          tag: ${{ github.event.inputs.branch }}
          artifacts: "pdfium-*.tgz"
